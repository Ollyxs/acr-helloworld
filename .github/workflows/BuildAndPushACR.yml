name: Build Linux Container Image and Push to ACR
env:
  REPO_NAME: ${{ github.event.repository.name }}
on:
  workflow_dispatch:
  push:
    tags: ['v*.*.*']
    branch: [main]

permissions:
  id-token: write
  contents: read

jobs:
  analyze:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    defaults:
      run:
        shell: bash
    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v4
    - name: 'Set up Python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: 'Install dependencies'
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ];
        then pip install -r requirements.txt;
        fi
        echo "CODEQL_PYTHON=$(which python)" >> $GITHUB_ENV
    - name: 'Initialize CodeQL'
      uses: github/codeql-action/init@v2
      with:
        languages: python
        setup-python-dependencies: false

  test:
    needs: analyze
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v4
    - name: 'Set up Python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: 'Install dependencies'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: 'Test with unittest'
      run: |
        python -m unittest discover -s tests

  getTag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    steps:
    - name: 'Get tag'
      id: tag
      uses: dawidd6/action-get-tag@v1
    - name: 'Use tag'
      run: echo "tag=${{ steps.tag.outputs.tag }}" >> "$GITHUB_OUTPUT"

  build:
    if: contains(github.event.head_commit.message, 'build') || cancelled()
    needs: [test, getTag]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4
    - name: 'Build and push image'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_NAME }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    - run: |
        docker build . -t ${{ secrets.ACR_NAME }}/${{ env.REPO_NAME }}:${{ needs.getTag.outputs.tag }}
        docker push ${{ secrets.ACR_NAME }}/${{ env.REPO_NAME }}:${{ needs.getTag.outputs.tag }}
    - name: 'Work successfully'
      id: build
      run: echo "status=success" >> $GIT_OUTPUT

  deploy:
    if: contains(github.event.head_commit.message, 'deploy') || cancelled()
    needs: [build, getTag]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: 'Check if build was successful'
      id: check
      run: |
        echo "build status: ${{ needs.build.outputs.status }}
        echo "run=false" >> $GIT_OUTPUT
        if [ "${{ needs.build.outputs.status }}" == "success" ]; then
          echo "run=true" >> $GIT_OUTPUT
        fi
    - name: 'Get lastest version of tag if build was successful'
      if: steps.check.outputs.run == 'true'
      run: echo "version=${{ needs.getTag.outputs.tag }}
      env:
        TAG: ${{ needs.getTag.outputs.tag }}
    - name: 'Get tag version of commit if build is skipped'
      id: version
      if: steps.check.outputs.run == 'false'
      run: |
        MESSAGE=$(git log -1 --pretty=%B)
        VERSION=$(echo $MESSAGE | grep -oP 'v\d+\.\d+\.\d+')
        echo "version=$VERSION" >> $GIT_OUTPUT
      env:
        TAG: ${{ steps.version.outputs.version }}
    - name: 'deploy Container Instancer'
      uses: azure/aci-deploy@v1
      with:
        location: eastus
        name: acr-helloworld
        resource-group: um
        image: ${{ secrets.ACR_NAME }}/${{ env.REPO_NAME }}:${{ env.TAG }}
        dns-name-label: um-${{ github.run_id }}-${{ github.run_attempt }}
        registry-username: ${{ secrets.REGISTRY_USERNAME }}
        registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        ports: 5000
        cpu: 1
        memory: 1

    - name: 'logout'
      run: |
        az logout
